{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"has",
				"hasAccess"
			],
			[
				"getT",
				"getTopCandidates"
			],
			[
				"rec",
				"recStatus"
			],
			[
				"Te",
				"TestFactory\t[Custom Apex Class]"
			],
			[
				"retu",
				"returnValue"
			],
			[
				"Sobject",
				"SObject\t[Standard Apex Class]"
			],
			[
				"com",
				"companyName"
			],
			[
				"is",
				"PUBLIC size() \tInteger"
			],
			[
				"return",
				"returnRec"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<aura:component controller=\"DynamicSearchController\" implements=\"flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId\" access=\"global\" >\n\t<aura:attribute name=\"objectApiName\" type=\"String\" default=\"Contact\" access=\"global\"/>\n\t<aura:attribute name=\"lstRecords\" type=\"DynamicSearchController\" />\n\t<aura:attribute name=\"displayfieldapiname\" default=\"Name\" type=\"String\" access=\"global\"/>\n\t<aura:attribute name=\"filter1_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"filter1_fieldValue\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"searchKey\" type=\"String\" />\n    <aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\" />\n    \n    <div class=\"slds\" style=\"padding-right: 0.5%;padding-bottom: 0.5%; padding-left: 0.5%;\">\n    \t\n    \t<div class=\"slds\" style=\"padding-right: 0.5%;padding-bottom: 0.5%; padding-left: 0.5%;\">\n    \t<div class=\"slds-page-header\" role=\"banner\">\n                  <div class=\"slds-grid\">\n                    <div class=\"slds-col slds-has-flexi-truncate\">\n                      <div class=\"slds-grid\">\n                      \t<ui:inputText aura:id=\"searchArea\" placeholder=\"Enter name...\" class=\"field\" keyup=\"{!c.searchKeyChange}\" updateOn=\"keyup\"/>\n                      </div>\n                    </div>\n                  </div>\n                  <p class=\"slds-text-body--small slds-page-header__info\"></p>\n                </div>\n        </div>        \n                <!-- End of Header  -->\n\n\n    \t<div>\n\t        \n\t        \n\t        <ul>\n\t        \t<aura:iteration items=\"{!v.lstRecords}\" var=\"rec\">\n\t                <li><a data-record=\"{!rec.recordID}\" onclick=\"{!c.navigateToRecord}\">{!rec.displayfieldname}</a></li>\n\t            </aura:iteration>\n\t        </ul>\n    \t</div>\n\t</div>\n\n</aura:component>",
			"file": "src/aura/DynamicSearch/DynamicSearch.cmp",
			"file_size": 1805,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 1805,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "({\n\tdoInit : function(component, event, helper) {\n        \n        console.log(\"DynamicSearchController.doInit: entered\");\n        \n\n        \thelper.getRecords(component);\n        \n\n        console.log(\"DynamicSearchController.doInit: exit\");\n        \n\t},\n    \n    searchKeyChange: function(component, event, helper) {\n        console.log(\"DynamicSearchController.searchKeyChange: entered\");\n\n        var keyVar = component.find(\"searchArea\").get(\"v.value\");\n\n        console.log(\"keyVar: \" + keyVar);\n        component.set(\"v.searchKey\", keyVar);\n\n        helper.getRecords(component);\n        \n        console.log(\"DynamicSearchController.searchKeyChange: entered\");\n    },\n    \n    navigateToRecord: function(component, event, helper) {\n        console.log(\"DynamicSearchController.navigateToRecord entered\");\n\n        \n        var selectedItem = event.currentTarget;\n        var selectedRecId = selectedItem.dataset.record;\n        console.log('selectedRecId = '+ selectedRecId);\n        \n        var navEvt = $A.get(\"e.force:navigateToSObject\");\n\t    navEvt.setParams({\n\t      \"recordId\": selectedRecId,\n\t      \"isredirect\": true,\n\t      \"slideDevName\": \"related\"\n\t    });\n\t    navEvt.fire();\n        console.log(\"DynamicSearchController.navigateToRecord exit\");\n    }\n})",
			"file": "src/aura/DynamicSearch/DynamicSearchController.js",
			"file_size": 1276,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 1276,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "({\n    getListRecords : function(cmp) {\n    console.log(\"InterviewListHelper.getListRecords: entered\");\n    var action = cmp.get(\"c.getListRecords\");\n        action.setParams({ \n            rowsLimit : cmp.get(\"v.limitRows\"), \n            objectApiName : cmp.get(\"v.objectApiName\"),\n            filter1Field : cmp.get(\"v.filter1_fieldapiname\"),\n            filter1Value : cmp.get(\"v.filter1_fieldValue\"),\n            eventField : cmp.get(\"v.eventIDField\"),\n            column1 : cmp.get(\"v.column1_fieldapiname\"),\n            column2 : cmp.get(\"v.column2_fieldapiname\"),\n            column3 : cmp.get(\"v.column3_fieldapiname\"),\n            column4 : cmp.get(\"v.column4_fieldapiname\"),\n            sortField : cmp.get(\"v.sortFieldName\"),\n            sortDirection : cmp.get(\"v.sortDirection\")\n        });\n\n        // Create a callback that is executed after \n        // the server-side action returns\n        action.setCallback(this, function(response) {\n            var state = response.getState();\n            // This callback doesn’t reference cmp. If it did,\n            // you should run an isValid() check\n            //if (cmp.isValid() && state === \"SUCCESS\") {\n            if (state === \"SUCCESS\") {\n                cmp.set(\"v.lstRecords\", response.getReturnValue());\n                \n                var lstRecs = cmp.get(\"v.lstRecords\");\n                cmp.set(\"v.listSize\", lstRecs.length);\n                cmp.set(\"v.lastSortFieldName\", cmp.get(\"v.sortFieldName\"));\n                cmp.set(\"v.lastSortDirection\", cmp.get(\"v.sortDirection\"));\n                \n                \n                var lstRecs = cmp.get(\"v.lstRecords\");\n                console.log(\"InterviewListHelper: lstRecs\" + lstRecs); \n                // Put all record ids in a comma-delimetted string to pass to other components like a map using an application event\n                \n                var recordIdsString;\n                \n              \n                \n            }\n            //else if (cmp.isValid() && state === \"INCOMPLETE\") {\n            else if (state === \"INCOMPLETE\") {\n                // do something\n            }\n            //else if (cmp.isValid() && state === \"ERROR\") {\n            else if (state === \"ERROR\") {\n                var errors = response.getError();\n                if (errors) {\n                    if (errors[0] && errors[0].message) {\n                        console.log(\"Error message: \" + \n                                 errors[0].message);\n                    }\n                } else {\n                    console.log(\"Unknown error\");\n                }\n            }\n        });\n\n        // optionally set storable, abortable, background flag here\n\n        // A client-side action could cause multiple events, \n        // which could trigger other events and \n        // other server-side action calls.\n        // $A.enqueueAction adds the server-side action to the queue.\n        $A.enqueueAction(action);\n        \n        console.log(\"InterviewListHelper.getListRecords: exit\");\n    },\n\n    getRunningUser : function(cmp) {\n    console.log(\"InterviewListHelper.getRunningUser: entered\");\n    var action = cmp.get(\"c.getCurrentUser\");\n\n        // Create a callback that is executed after \n        // the server-side action returns\n        action.setCallback(this, function(response) {\n            var state = response.getState();\n            // This callback doesn’t reference cmp. If it did,\n            // you should run an isValid() check\n            //if (cmp.isValid() && state === \"SUCCESS\") {\n            if (state === \"SUCCESS\") {\n                cmp.set(\"v.runningUser\", response.getReturnValue());   \n                \n            }\n            //else if (cmp.isValid() && state === \"INCOMPLETE\") {\n            else if (state === \"INCOMPLETE\") {\n                // do something\n            }\n            //else if (cmp.isValid() && state === \"ERROR\") {\n            else if (state === \"ERROR\") {\n                var errors = response.getError();\n                if (errors) {\n                    if (errors[0] && errors[0].message) {\n                        console.log(\"Error message: \" + \n                                 errors[0].message);\n                    }\n                } else {\n                    console.log(\"Unknown error\");\n                }\n            }\n        });\n\n        // optionally set storable, abortable, background flag here\n\n        // A client-side action could cause multiple events, \n        // which could trigger other events and \n        // other server-side action calls.\n        // $A.enqueueAction adds the server-side action to the queue.\n        $A.enqueueAction(action);\n        \n        console.log(\"InterviewListHelper.getRunningUser: exit\");\n    }\n})",
			"file": "src/aura/InterviewsList/InterviewsListHelper.js",
			"file_size": 4746,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 4742,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "({\n    doInit : function(component, event, helper) {\n        \n        console.log(\"InterviewsListController.doInit: entered\");\n        \n        // check if the user supplied a field for the columns and hide them if not\n        var col2Content = component.get(\"v.column2_fieldapiname\") ;\n        if (!col2Content)\n        {\n            var toggleText = component.find(\"col2\");\n            $A.util.addClass(toggleText,'toggle');\n            \n            var toggleRow = component.find(\"col2Row\");\n            $A.util.addClass(toggleRow,'toggle');\n        }\n        \n        var col3Content = component.get(\"v.column3_fieldapiname\") ;\n        if (!col3Content)\n        {\n            var toggleText = component.find(\"col3\");\n            $A.util.addClass(toggleText,'toggle');\n            \n            var toggleRow = component.find(\"col3Row\");\n            $A.util.addClass(toggleRow,'toggle');\n        }\n        \n        var col4Content = component.get(\"v.column4_fieldapiname\") ;\n        if (!col4Content)\n        {\n            var toggleText = component.find(\"col4\");\n            $A.util.addClass(toggleText,'toggle');\n            \n            var toggleRow = component.find(\"col4Row\");\n            $A.util.addClass(toggleRow,'toggle');\n        }\n        \n        var showButton = component.get(\"v.showButton\") ;\n        if (showButton == false)\n        {\n            var toggleText = component.find(\"colButton\");\n            $A.util.addClass(toggleText,'toggle');\n            \n            var toggleRow = component.find(\"colButtonRow\");\n            $A.util.addClass(toggleRow,'toggle');\n        }\n        \n        // Call client side helper action to populate the list with records\n        helper.getListRecords(component);\n\n        // Call client side helper action to call server and get the running user Id\n        helper.getRunningUser(component);\n\n        console.log(\"InterviewsListController.doInit: exit\");\n        \n    },\n    \n    doneRendering : function(component, event, helper) {\n        console.log(\"InterviewsListController.doneRendering: entered\");\n        var lstRecs = component.get(\"v.lstRecords\");\n        var arr = [];\n        arr = lstRecs;\n        if (arr != null && !component.get(\"v.isDoneRendering\")){\n            /*var rec1 = arr[0].recordID ;\n            console.log(\"rec1: \" + rec1); */\n            var firstRow = component.find(\"firstRow\");\n\n            console.log(\"firstRow: \" + firstRow);\n            $A.util.removeClass(firstRow, \"slds-hint-parent\");\n            $A.util.addClass(firstRow, \"slds-is-selected\"); \n            component.set(\"v.isDoneRendering\", true);\n            \n            \n            // Fire standard ltng:selectSobject event:\n            var stdAppEvent = $A.get(\"e.ltng:selectSObject\");\n    \n            stdAppEvent.setParams({ \"recordId\": arr[0].eventField, \"channel\": \"Project Sparkle Interview List LC\" });\n            stdAppEvent.fire();\n\n        }\n        \n        \n\n        \n\t\tconsole.log(\"InterviewsListController.doneRendering: exit\")\n\n\n    },\n    \n    fireApplicationEvent : function(component, event, helper) {\n\n        //CSS - Remove Selected class from first row and any other rows that were selected before        \n        var firstRow = component.find(\"firstRow\");\n        console.log(\"firstRow: \" + firstRow);\n        $A.util.removeClass(firstRow, \"slds-is-selected\");\n        $A.util.addClass(firstRow, \"slds-hint-parent\"); \n        \n        \n        var lastSelectedRow = component.get(\"v.lastSelectedRow\");\n\t\tconsole.log(\"lastSelectedRow: \" + lastSelectedRow);\n        if (lastSelectedRow){\n            $A.util.removeClass(lastSelectedRow, \"slds-is-selected\");\n        \t$A.util.addClass(lastSelectedRow, \"slds-hint-parent\");\n        }\n        \n        // Grab the record id from the DOM - Table row that was clicked\n       \n        var selectedItem = event.currentTarget;\n        console.log(\"selectedItem: \" + selectedItem);\n        var SelectedRecordID = selectedItem.dataset.record;\n        console.log('Selected Record ID = '+ SelectedRecordID);\n\n\n\n\n        var SelectedParentRecID = selectedItem.dataset.mainrec;\n        console.log('SelectedParentRecID = '+ SelectedParentRecID);\n        component.set(\"v.selectedRecordId\", SelectedParentRecID);\n        \n        //CSS - Add Selected class to the row that was clicked        \n        $A.util.removeClass(selectedItem, \"slds-hint-parent\");\n        $A.util.addClass(selectedItem, \"slds-is-selected\"); \n        \n        // Store the last Table Rown that was clicked\n        component.set(\"v.lastSelectedRow\", selectedItem);\n\n\n        // Fire standard ltng:selectSobject event:\n        var stdAppEvent = $A.get(\"e.ltng:selectSObject\");\n\n        stdAppEvent.setParams({ \"recordId\": SelectedRecordID, \"channel\": \"Project Sparkle Interview List LC\" });\n        stdAppEvent.fire();\n\n\n\n    },\n\n    CreateNewRecord : function(component, event, helper) {\n        \n        console.log(\"InterviewsListController.CreateNewRecord: entered\");\n        var objectAPIName = component.get(\"v.objectApiName\");\n\n        var createRecordEvent = $A.get(\"e.force:createRecord\");\n        createRecordEvent.setParams({\n            \"entityApiName\": objectAPIName\n        });\n        createRecordEvent.fire();\n\n        console.log(\"InterviewsListController.CreateNewRecord: exit\");\n\n    },\n\n    handleListMenuClick : function(component, event, helper) {\n        \n        console.log(\"InterviewsListController.handleListMenuClick: entered\");\n        var btnLabel = component.get(\"v.buttonLabel\");\n\n\n        var selectedItem = event.detail.menuItem.elements[\"0\"].textContent;\n        console.log(\"selectedItem: \" + selectedItem);\n\n        var selectedRecId = component.get(\"v.selectedRecordId\");\n        console.log(\"selectedRecId: \" + selectedRecId);\n\n        switch (selectedItem) {\n            case \"View\":\n                console.log(\"View switch: \");\n                var viewRecordEvent = $A.get(\"e.force:navigateToSObject\");\n                viewRecordEvent.setParams({\"recordId\": selectedRecId});\n                viewRecordEvent.fire();\n                break;\n            case \"Edit\":\n                console.log(\"Edit switch: \");\n                var editRecordEvent = $A.get(\"e.force:editRecord\");\n                editRecordEvent.setParams({\"recordId\": selectedRecId});\n                editRecordEvent.fire();\n                break;\n            case btnLabel:\n                console.log(\"btnLabel switch: \");\n                break;\n        }\n\n\n        console.log(\"InterviewsListController.handleListMenuClick: exit\");\n\n    },\n    \n    \n    sortGrid : function(component, event, helper) {\n        console.log(\"InterviewsListController.sortGrid: entered\");\n        var selectedItem = event.currentTarget;\n        var selectedFieldSortName = selectedItem.dataset.record;\n        console.log('Field to Sort = '+ selectedFieldSortName);\n        \n        if (selectedFieldSortName == component.get(\"v.lastSortFieldName\"))\n        {\n            if (component.get(\"v.lastSortDirection\") == 'asc')\n            {\n               component.set(\"v.sortDirection\", 'desc'); \n            }\n            else\n            {\n                component.set(\"v.sortDirection\", 'asc'); \n            }\n        }\n        else\n        {\n            component.set(\"v.sortFieldName\", selectedFieldSortName); \n        }\n        \n       helper.getListRecords(component);\n       var fireListEvent = component.get(\"v.fireListRecordsEvent\");\n       if (fireListEvent == true)\n       {\n            var lstRecs = component.get(\"v.lstRecords\");\n            console.log(\"InterviewsListController.fireListRecordsEvent: lstRecs: \" + lstRecs);\n            var recordIdsString;\n                \n                \n                if (lstRecs)\n                {\n                    for (var i=0; i<lstRecs.length; i++) \n                    {\n                        var record = lstRecs[i];\n                        console.log('InterviewsListController.fireListRecordsEvent.getListRecords: record ' + record);\n                        \n                        if (i == 0)\n                        {\n                           recordIdsString = \"'\" + record.recordID; \n                        }\n                        else\n                        {\n                            recordIdsString = recordIdsString + \"','\" + record.recordID;\n                            if (i == (lstRecs.length - 1))\n                            {\n                                recordIdsString = recordIdsString + \"'\";\n                            }\n                        }\n       \n                        \n                        \n                        console.log('InterviewsListController.fireListRecordsEvent.getListRecords: recordIdsString ' + recordIdsString);\n                    }\n                    \n                    if (recordIdsString)\n                    {\n                        // if there is content in the comma-delimitted list of record ids fire the application event with it as a parameter\n                        var appEvent = $A.get(\"e.c:RecordListIdsEvent\");\n                        console.log('InterviewsListController.fireListRecordsEvent: appEvent ' + appEvent);\n                        appEvent.setParams({ \"recordIdsParameter\": recordIdsString });\n                        console.log('InterviewsListController.fireListRecordsEvent: appEvent ' + appEvent);\n                        appEvent.fire();\n                    }\n              }\n         \n       }\n       \n       console.log(\"Generic_ListController.sortGrid: exit\"); \n    },\n\n\n    OpenVisualForce:function(component,event,helper) {\n        \n        $A.log(\"InterviewsListController.OpenVisualForce: entered\");\n       \n       //var btnURL = component.get(\"v.buttonURL\");\n       \n        var urlEvent = $A.get(\"e.force:navigateToURL\");\n        urlEvent.setParams({\n          \"url\" : component.get(\"v.buttonURL\")\n        });\n        urlEvent.fire();\n\n       /* TODO: Handle App Builder Parameters and List Row Clicks to allow VF page parameters to be passed dynamically\n\n       var btnUrlParameterFieldName = component.get(\"v.buttonURLParameter\");\n       var blnUserIdAsParameter = component.get(\"v.userIdParameterValue\");\n\n       console.log(\"blnUserIdAsParameter: \" + blnUserIdAsParameter); \n\n       var linkUrl = btnURL + '?' + btnUrlParameterFieldName + '=' ;\n\n       console.log(\"linkUrl before param value: \" + linkUrl);\n\n       if(blnUserIdAsParameter)\n       {\n            // Get user id and append it to URL as parameter\n            var usr = component.get(\"v.runningUser\");\n            console.log(\"usr: \" + usr); \n\n            var usrId = usr.Id;\n            console.log(\"usrId: \" + usrId); \n\n            linkUrl = linkUrl + usrId;\n\n            console.log(\"linkUrl with user id: \" + linkUrl);\n\n\n       }\n\n       var SecondUrlParameterFieldName = component.get(\"v.buttonURLParameter2\");\n\n       if (SecondUrlParameterFieldName)\n       {\n           // Parameter 2 (get record id from List row user click event)\n           var selectedItem = event.currentTarget;\n           var clickedRecId = selectedItem.dataset.record;\n           console.log('Clicked RecId = '+ clickedRecId);\n\n           linkUrl = linkUrl + '&' + SecondUrlParameterFieldName + '=' + clickedRecId;\n\n           console.log(\"linkUrl with 2nd parameter appended: \" + linkUrl);\n       }\n\n       // Fire Lightning Navigation Event to take user to Page with parameters\n        \n        var urlEvent = $A.get(\"e.force:navigateToURL\");\n        urlEvent.setParams({\n          \"url\" : linkUrl\n        });\n        urlEvent.fire();\n        \n        \n        */\n        \n        $A.log(\"InterviewsListController.OpenModal: exit\");\n    },\n    \n    OpenModal:function(component,event,helper) {\n        \n        $A.log(\"InterviewsListController.OpenModal: entered\");\n       \n        // Open Modal\n        var toggleText = component.find(\"modal\");\n        $A.util.removeClass(toggleText,'toggle');\n\n        \n        \n        \n        \n        \n        $A.log(\"InterviewsListController.OpenModal: exit\");\n    },\n    \n    CloseModal:function(component,event,helper) {\n        \n        $A.log(\"InterviewsListController.CloseModal: entered\");\n       \n        // Close Modal\n        var toggleText = component.find(\"modal\");\n        $A.util.addClass(toggleText,'toggle');\n\n        \n        \n        \n        \n        \n        $A.log(\"InterviewsListController.CloseModal: exit\");\n    }\n  \n})",
			"file": "src/aura/InterviewsList/InterviewsListController.js",
			"file_size": 12378,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 12378,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<aura:component controller=\"ListServerController\" implements=\"flexipage:availableForAllPageTypes,forceCommunity:availableForAllPageTypes\" access=\"global\" >\n    \n    <aura:attribute name=\"runningUser\" type=\"User\" access=\"global\"/>\n    <aura:attribute name=\"lstRecords\" type=\"ListServerController\" access=\"global\"/>\n    <aura:attribute name=\"selectedRecordId\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"listSize\" type=\"Integer\" default=\"0\" access=\"global\"/>\n    <aura:attribute name=\"limitRows\" type=\"String\" default=\"8\" access=\"global\"/>\n    <aura:attribute name=\"objectName\" type=\"String\" default=\"Object Name\" access=\"global\"/>\n    <aura:attribute name=\"objectApiName\" type=\"String\" default=\"Account\" access=\"global\"/>\n    <aura:attribute name=\"eventIDField\" type=\"String\" default=\"Id\" access=\"global\"/>\n    <aura:attribute name=\"fireListRecordsEvent\" type=\"Boolean\" default=\"false\" access=\"global\"/>\n    <aura:attribute name=\"listName\" type=\"String\" default=\"List Name\" access=\"global\"/>\n    <aura:attribute name=\"column1_headertext\" type=\"String\" default=\"Column 1\" access=\"global\"/>\n    <aura:attribute name=\"column1_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"column2_headertext\" type=\"String\" default=\"Column 2\" access=\"global\"/>\n    <aura:attribute name=\"column2_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"column3_headertext\" type=\"String\" default=\"Column 3\" access=\"global\"/>\n    <aura:attribute name=\"column3_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"column4_headertext\" type=\"String\" default=\"Column 4\" access=\"global\"/>\n    <aura:attribute name=\"column4_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"filter1_fieldapiname\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"filter1_fieldValue\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"sortFieldName\" type=\"String\" default=\"Name\" access=\"global\"/>\n    <aura:attribute name=\"sortDirection\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"lastSortFieldName\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"lastSortDirection\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"showButton\" type=\"Boolean\" default=\"True\" access=\"global\"/>\n    <aura:attribute name=\"buttonLabel\" type=\"String\" default=\"Start\" access=\"global\"/>\n    <aura:attribute name=\"buttonURL\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"buttonURLParameter\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"buttonURLParameter2\" type=\"String\" access=\"global\"/>\n    <aura:attribute name=\"userIdParameterValue\" type=\"Boolean\" default=\"False\" access=\"global\"/>\n    <aura:attribute name=\"isDoneRendering\" type=\"Boolean\" default=\"false\"/>\n    \n    <aura:attribute name=\"lastSelectedRow\" type=\"Object\" access=\"global\"/>\n    \n    <ltng:require styles=\"/resource/testautonumdata__SLDS0103/assets/styles/salesforce-lightning-design-system-ltng.css\" />\n    <!-- System Event -->\n    <aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\" />\n    <aura:handler event=\"aura:doneRendering\" action=\"{!c.doneRendering}\"/>\n\n\n<!-- Application Event -->\n  <aura:registerEvent name=\"stdAppEvent\" type=\"ltng:selectSObject\"/>\n\n\n    <aura:registerEvent name=\"recordListEvent\" type=\"c:recordListEvent\"/>\n    <div class=\"slds tokenPadding\" style=\"\">\n      <!-- List LC: Start -->  \n        <div class=\"slds-page-header\" role=\"banner\">\n              <div class=\"slds-grid\">\n                <div class=\"slds-col slds-has-flexi-truncate\">\n                  <p class=\"slds-text-heading--label\">{!v.objectName}</p>\n                  <div class=\"slds-grid\">\n                    <div class=\"slds-grid slds-type-focus slds-no-space\">\n                      <h1 class=\"slds-page-header__title slds-truncate\" title=\"My Leads (truncates)\">{!v.listName}</h1>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"slds-col slds-no-flex slds-align-bottom\">\n                  <div class=\"slds-grid\">\n                    <div class=\"slds-button-space-left\">\n                    </div>\n                    <div class=\"slds-button-group slds-button-space-left\" role=\"group\">\n                    </div>\n                    <div class=\"slds-button-group\" role=\"group\">\n                      <div class=\"slds-button--last\">\n\n                        <!-- Browser Event -->\n                          <button class=\"slds-button slds-button--neutral\" onclick=\"{!c.CreateNewRecord}\">New</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <p class=\"slds-text-body--small slds-page-header__info\">{!v.listSize} items</p>\n            </div>\n            \n            <!-- End of Header  -->\n            \n            \n            <table aura:id=\"tablebody\" class=\"slds-table slds-table--bordered\">\n                <thead>\n                  <tr class=\"slds-text-heading--label\">\n                    <th class=\"slds-cell-shrink\">\n                    </th>\n                    <th class=\"slds-is-sortable\" scope=\"col\" data-record=\"{!v.column1_fieldapiname}\" onclick=\"{!c.sortGrid}\">\n                      <div class=\"slds-truncate\">{!v.column1_headertext}\n                        <button class=\"slds-button slds-button--icon-bare\">\n                          <span class=\"slds-assistive-text\">Sort</span>\n                        </button>\n                      </div>\n                    </th>\n                    <th class=\"slds-is-sortable sizehidden\" aura:id=\"col2\" scope=\"col\" data-record=\"{!v.column2_fieldapiname}\" onclick=\"{!c.sortGrid}\">\n                      <div class=\"slds-truncate\">{!v.column2_headertext}\n                        <button class=\"slds-button slds-button--icon-bare\">\n                          <span class=\"slds-assistive-text\">Sort</span>\n                        </button>\n                      </div>\n                    </th>\n                    <th class=\"slds-is-sortable sizehidden\" aura:id=\"col3\" scope=\"col\" data-record=\"{!v.column3_fieldapiname}\" onclick=\"{!c.sortGrid}\">\n                      <div class=\"slds-truncate\">{!v.column3_headertext}\n                        <button class=\"slds-button slds-button--icon-bare\">\n                          <span class=\"slds-assistive-text\">Sort</span>\n                        </button>\n                      </div>\n                    </th>\n                    <th class=\"slds-is-sortable sizehidden\" aura:id=\"col4\" scope=\"col\" data-record=\"{!v.column4_fieldapiname}\" onclick=\"{!c.sortGrid}\">\n                      <div class=\"slds-truncate\">{!v.column4_headertext}\n                        <button class=\"slds-button slds-button--icon-bare\">\n                          <span class=\"slds-assistive-text\">Sort</span>\n                        </button>\n                      </div>\n                    </th>\n                    <th class=\"slds-is-sortable\" aura:id=\"colButton\" scope=\"col\">\n                      <div class=\"slds-truncate\">Action\n                        <button type=\"button\"  class=\"slds-button slds-button--icon-bare\" >\n                          <span class=\"slds-assistive-text\">Sort</span>\n                        </button>\n                      </div>\n                    </th>\n                    \n                    <th class=\"slds-cell-shrink\"></th>\n                  </tr>\n                </thead>\n                <tbody >\n                    <aura:iteration items=\"{!v.lstRecords}\"  var=\"rec\" indexVar=\"index\">\n                      <aura:if isTrue=\"{!index == 0}\">\n                      <tr aura:id=\"firstRow\" class=\"slds-hint-parent\" data-mainrec=\"{!rec.recordID}\" data-record=\"{!rec.eventField}\" onclick=\"{!c.fireApplicationEvent}\">\n                        <td class=\"slds-cell-shrink\">\n                        </td>\n                          <th class=\"slds-truncate\" scope=\"row\">{!rec.column1}</th>\n                        <td class=\"slds-truncate sizehidden\" aura:id=\"col2Row\">{!rec.column2}</td>\n                        <td class=\"sizehidden\" aura:id=\"col3Row\" >{!rec.column3}</td>\n                        <td class=\"sizehidden\" aura:id=\"col4Row\" >{!rec.column4}</td>\n                        <aura:renderIf isTrue=\"{!v.showButton}\">\n\n                          <td class=\"\" aura:id=\"colButtonRow\">                    \n                            \n\n                          <lightning:buttonMenu alternativeText=\"More options\" onselect=\"{!c.handleListMenuClick }\">\n                              <lightning:menuItem label=\"View\" value=\"View\" />\n                              <lightning:menuItem label=\"Edit\" value=\"Edit\" />\n                              <!--<lightning:menuItem label=\"{!v.buttonLabel}\" value=\"customNavigateAction\" /> -->\n                          </lightning:buttonMenu>\n\n                        </td>\n                        </aura:renderIf>\n                        <td class=\"slds-cell-shrink\" data-label=\"Actions\">\n                        </td>\n                      </tr>\n                    <aura:set attribute=\"else\">\n                      <tr class=\"slds-hint-parent\" data-mainrec=\"{!rec.recordID}\" data-record=\"{!rec.eventField}\" onclick=\"{!c.fireApplicationEvent}\">\n                        <td class=\"slds-cell-shrink\">\n                        </td>\n                          <th class=\"slds-truncate\" scope=\"row\">{!rec.column1}</th>\n                        <td class=\"slds-truncate sizehidden\" aura:id=\"col2Row\">{!rec.column2}</td>\n                        <td class=\"sizehidden\" aura:id=\"col3Row\" >{!rec.column3}</td>\n                        <td class=\"sizehidden\" aura:id=\"col4Row\" >{!rec.column4}</td>\n                        <aura:renderIf isTrue=\"{!v.showButton}\">\n\n                          <td class=\"\" aura:id=\"colButtonRow\">                    \n                            <lightning:buttonMenu alternativeText=\"More options\" onselect=\"{!c.handleListMenuClick }\">\n                              <lightning:menuItem label=\"View\" value=\"View\" />\n                              <lightning:menuItem label=\"Edit\" value=\"Edit\" />\n                              <!--<lightning:menuItem label=\"{!v.buttonLabel}\" value=\"customNavigateAction\" /> -->\n                          </lightning:buttonMenu>\n                        </td>\n                        </aura:renderIf>\n                        <td class=\"slds-cell-shrink\" data-label=\"Actions\">\n                        </td>\n                      </tr>  \n                    </aura:set>\n\n                    </aura:if>\n                    </aura:iteration>\n                </tbody>\n              </table>\n        \n        <!-- List LC: End --> \n   \n        <!-- Modal LC: Start -->\n\n       \n        <!-- Modal LC: End -->\n        \n    </div>\n  \n</aura:component>",
			"file": "src/aura/InterviewsList/InterviewsList.cmp",
			"file_size": 10756,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 10756,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<aura:component controller=\"Twitter_Lightning_Controller\" access=\"global\" >\n\t<aura:attribute name=\"recordId\" type=\"String\" access=\"GLOBAL\"/>\n    <aura:attribute name=\"fullName\" type=\"String\" access=\"GLOBAL\"/>\n\t<aura:attribute name=\"record\" type=\"Twitter_Lightning_Controller\" access=\"global\"/>\n\t<aura:attribute name=\"rec\" type=\"Twitter_Lightning_Controller\" access=\"global\"/>\n\t<aura:attribute name=\"hasRecords\" type=\"Boolean\" default=\"false\" access=\"global\"/>    \n    <aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\" access=\"global\"/>\n    <aura:handler event=\"c:TwitterRecordEvent\" action=\"{!c.handleApplicationEvent}\" access=\"global\"/>\n    <aura:handler event=\"aura:waiting\" action=\"{!c.showSpinner}\"/>\n    <aura:handler event=\"aura:doneWaiting\" action=\"{!c.hideSpinner}\"/>\n    <ltng:require styles=\"/resource/SLDS0103/assets/styles/salesforce-lightning-design-system-ltng.css\" />\n\n    <div class=\"slds slds-is-relative\" style=\"padding-top: 0.5%;padding-right: 0.5%;padding-bottom: 0.5%; padding-left: 0.5%;\">\n        <div aura:id=\"xi-spinner\" class=\"xc-hidden\" style=\"padding-top: 4px;\">\n        <div class=\"slds-spinner--brand slds-spinner slds-spinner--medium\" aria-hidden=\"false\" role=\"alert\">\n            <div class=\"slds-spinner__dot-a\"></div>\n            <div class=\"slds-spinner__dot-b\"></div>\n        </div>\n    </div>  \n\n\t<aura:if isTrue=\"{!v.hasRecords}\">\t\n        <div class=\"slds-grid slds-grid--align-left\">\n            <div class=\"smallFit info-mediumFit info-largeFit info-xlargeFit\" style=\"\">\n            \n                <div class=\"slds-media slds-media--responsive\" style=\"min-width: 70%; padding-top: 8px;\">\n                <div class=\"slds-media__figure\" style=\"padding-top: 2%;\">\n                  <img src=\"{!v.rec.pictureUrl}\" class=\"slds-avatar--large\" style=\"border-radius: 7px;\" alt=\"Placeholder\" />\n                </div>\n                <div class=\"slds-media__body\" style=\"min-width: 300px;\">\n                      <!--<p>{!v.rec.twitterName}</p> -->\n                    <div class=\"slds-grid\">\n                        <div class=\"iconsDiv\"> <img src=\"{!$Resource.SLDS0103 + '/assets/icons/utility/home_60.png'}\" style=\"width: 12px;height: 10px; padding-right:1px;\"/></div>\n                                                                                                                                                                                                 \n                        <div class=\"numberDiv\">{!v.rec.location}</div>\n                    </div>\n\n                    <div class=\"slds-grid\">\n                        <div class=\"iconsDiv\"><img src=\"{!$Resource.SLDS0103 + '/assets/icons/utility/people_60.png'}\" style=\"width: 12px;height: 10px; padding-right:1px;\"/></div>\n                        <div class=\"numberDiv\">Followers: {!v.rec.numFollowers} </div>\n                    </div>\n                    <div class=\"slds-grid\">\n                        <div class=\"iconsDiv\"><img src=\"{!$Resource.SLDS0103 + '/assets/icons/utility/adduser_60.png'}\" style=\"width: 12px;height: 10px; padding-right:1px;\"/> </div>\n                        <div class=\"numberDiv\"> Follows: {!v.rec.follows}</div>\n                    </div>\n                    \n                      \n                    </div>\n               </div>\n            \n            </div>\n            <div class=\"smallFit tweet-mediumFit tweet-largeFit tweet-xlargeFit\" style=\" max-width: 350px; padding-left: 2%;\">\n\n                    <div style=\"\" >\n                    \t<img src=\"{!$Resource.lightningicons + '/lightningicons/images/Twitter_logo_blue.png'}\" style=\"width: 12px;height: 10px; padding-right:1px;\"/>\n                    </div>\n                    <div style=\"\"> \n                        <div style=\"font-size: xx-small\">{!v.rec.tweetDate}</div>\n                </div>\n                <div class=\"slds-grid slds-grid--align-left\">\n                    <div class=\"slds-col slds-size--1-of-1\">\n                        \n                        <span style=\"padding-right:6px;\">\n                        <a  onclick=\"{!c.OpenTweet}\">{!v.rec.tweetText} </a></span>\n                    </div>\n                </div>\n                <!--<ui:button press=\"{!c.pressButton}\">\n                    <div auraid=\"myButton\" class=\"testClass\"> Click Me</div>\n                </ui:button> -->\n\n            </div>\n        </div>\n        </aura:if>\n    </div>\n\t\n\n\n\n\n</aura:component>",
			"file": "src/aura/TwitterUserDetails/TwitterUserDetails.cmp",
			"file_size": 4400,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 4400,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": ".THIS .toggle {\n   display: none;\n}",
			"file": "src/aura/Twitter_Explorer/Twitter_Explorer.css",
			"file_size": 35,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 35,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<aura:component controller=\"Twitter_Lightning_Controller\" implements=\"flexipage:availableForAllPageTypes,force:hasRecordId\" access=\"global\" >\n\n    <aura:attribute name=\"recordId\" type=\"String\" access=\"GLOBAL\"/>\n    <aura:attribute name=\"hasId\" type=\"Boolean\" access=\"global\"/>\n    <aura:attribute name=\"objectApiName\" type=\"String\" default=\"testautonumdata__Candidate__c\" access=\"global\"/>\n    <aura:attribute name=\"TwitterIDFieldApiName\" type=\"String\" default=\"testautonumdata__Twitter_ID__c\" access=\"global\"/>\n    <aura:attribute name=\"rec\" type=\"Twitter_Lightning_Controller\" access=\"global\"/>\n\n    <aura:attribute name=\"ObjectFirstNameAPIField\" type=\"String\" access=\"GLOBAL\"/>\n    <aura:attribute name=\"ObjectLastNameAPIField\" type=\"String\" access=\"GLOBAL\"/>\n    <aura:attribute name=\"ObjectCompanyNameAPIField\" type=\"String\" access=\"GLOBAL\"/>\n    <aura:attribute name=\"ObjectEmailAPIField\" type=\"String\" access=\"GLOBAL\"/>\n\n    \n    <aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\" />\n    <aura:handler event=\"ltng:selectSObject\" action=\"{!c.handleApplicationEvent}\"/>\n    <aura:registerEvent name=\"TwitterRecordEvent\" type=\"c:TwitterRecordEvent\"/>\n\n\n    <div class=\"slds\" style=\"padding-right: 0.5%;padding-bottom: 0.5%; padding-left: 0.5%;\">\n\n        <div class=\"slds-page-header\" role=\"banner\">\n                  <div class=\"slds-grid\">\n                    <div class=\"slds-col slds-has-flexi-truncate\">\n                      <div class=\"slds-grid\">\n                        <div class=\"slds-grid slds-type-focus slds-no-space\">\n\n                                \n                                <span class=\"slds-avatar slds-avatar--circle slds-avatar--medium \" style=\"width: 32px; height: 32px; background-color: #5ba8df;\">\n                                    <img src=\"{!$Resource.lightningicons + '/lightningicons/images/twitterwhite.png'}\" style=\"\"/>\n                                </span>\n                                <h1 class=\"slds-page-header__title slds-truncate\" style=\"padding-left:6px;\">Twitter Explorer</h1>\n                            \n                            \n\n                          \n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <p class=\"slds-text-body--small slds-page-header__info\">{!v.rec.twitterName}</p>\n                </div>\n                \n                <!-- End of Header  -->\n\n        <!-- Embed 2 components, 1 to show user Twitter details if there is a twitter id and if not show a component to enable the user to search for the right Twitter user -->\n        <div style=\"min-height: 150px;\"> \n            <div aura:id=\"userdetails\" >\n                <c:TwitterUserDetails recordId=\"{!v.recordId}\" rec=\"{!v.rec}\"/>\n            </div>\n\n            <div aura:id=\"searchusers\">\n                <c:TwitterUserSearch />     \n            </div>\n        </div>\n    \n    </div>\n    \n</aura:component>",
			"file": "src/aura/Twitter_Explorer/Twitter_Explorer.cmp",
			"file_size": 2940,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 2940,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "({\n    doInit : function(component, event, helper) {\n        \n        console.log(\"TwitterExplorerController.doInit: entered\");\n        \n        // Hide both user details and User Search Components:\n\n        //var toggleText = component.find(\"userdetails\");\n        //$A.util.addClass(toggleText,'toggle');\n        var toggleText = component.find(\"searchusers\");\n        $A.util.addClass(toggleText,'toggle');\n\n        \n        helper.checkTwitterId(component);\n        \n\n        console.log(\"TwitterExplorerController.doInit: exit\");\n        \n    },\n    \n    handleApplicationEvent : function(component, event, helper) {\n        \n        console.log(\"TwitterExplorerController.handleApplicationEvent: entered\");\n        \n        var params = event.getParams();\n        component.set(\"v.recordId\", params.recordId);\n\n        console.log(\"Twitter Explorer: ltng:SelectSobject - recordID = \" + params.recordId);\n        console.log(\"Twitter Explorer: ltng:SelectSobject - channel = \" + params.channel);\n\n        var toggleText = component.find(\"userdetails\");\n        $A.util.addClass(toggleText,'toggle');\n        var toggleText = component.find(\"searchusers\");\n        $A.util.addClass(toggleText,'toggle');\n\n        \n        helper.checkTwitterId(component);\n        \n\n        console.log(\"TwitterExplorerController.handleApplicationEvent: exit\");\n        \n    }\n})",
			"file": "src/aura/Twitter_Explorer/Twitter_ExplorerController.js",
			"file_size": 1366,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 1366,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/rreboucas/Documents/quickactionsComponentCode.txt",
			"settings":
			{
				"buffer_size": 1669,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "<aura:component implements=\"flexipage:availableFor"
			}
		},
		{
			"contents": "global with sharing class CandidateController {\n    Private final Candidate__c rec;\n    public CandidateController(ApexPages.StandardController stdController) {\n        this.rec = (Candidate) stdController.getRecord();\n    }\n    //For Javascript button\n    webservice static String sendSMS(Id CandidateId, String Phone, String Message){\n        if(sendSMSViaTwilio(CandidateId, Phone, Message) != null) {\n            return 'SMS was sent successfully!';\n        }\n        return 'SMS was NOT sent successfully!';\n    }\n    \n    //For LC\n    //Need to fetch Phone number\n    @AuraEnabled\n    public static Boolean sendSMS(Id CandidateId, String Message){\n        try{\n            List<Candidate> a = [Select Id, Phone__c  from Candidate__c where Id=:CandidateId limit 1];\n            if(a.size() > 0){\n                if(sendSMSViaTwilio(CandidateId, a[0].Phone__c , message) != null){\n                    return true;\n                }\n            }\n        }catch(Exception e){}\n        return false;\n    }\n\n    public static String sendSMSViaTwilio(Id CandidateId, String Phone, String Message){\n        String ret = null;\n        try{\n            String Candidate = 'ACb6d4b22484fe90c2bf1d939a42545897';\n            String token = 'd73786bbe77fb16c507c5b25fd4b631a';\n            TwilioRestClient client = new TwilioRestClient(Candidate, token);\n\n            Map<String,String> params = new Map<String,String> {\n                    'To'   => Phone,\n                    'From' => '+1 6137040291 ',\n                    'Body' => message\n            };\n            TwilioSMS sms = client.getCandidate().getSMSMessages().create(params);\n            System.debug(sms);\n            ret = sms.getStatus();\n            System.debug(ret);\n        }catch(Exception e){System.debug('Exception: ' + e.getMessage());}\n        return ret;\n    }\n}",
			"settings":
			{
				"buffer_size": 1834,
				"line_ending": "Unix",
				"name": "global with sharing class CandidateController {"
			}
		},
		{
			"contents": "public with sharing class Twitter_Lightning_Controller {\n    \n    private static Map<String, Set<String>> mapObjectsFields = null;\n\n    @AuraEnabled\n    public String salesforceRecordID { get;set; }\n    @AuraEnabled\n    public String pictureUrl { get;set; }\n    @AuraEnabled\n    public String twitterName { get;set; }\n    @AuraEnabled\n    public Boolean hasTwitterMemberID { get;set; }\n    @AuraEnabled\n    public String firstName { get;set; }\n    @AuraEnabled\n    public String lastName { get;set; }\n    @AuraEnabled\n    public String companyName { get;set; }\n    @AuraEnabled\n    public String email { get;set; }\n    @AuraEnabled\n    public String location { get;set; }\n    @AuraEnabled\n    public String numFollowers { get;set; }\n    @AuraEnabled\n    public String follows { get;set; }\n    @AuraEnabled\n    public String description { get;set; }\n    @AuraEnabled\n    public String tweetDate { get;set; }\n    @AuraEnabled\n    public String tweetText { get;set; }\n    @AuraEnabled\n    public String tweetLink { get;set; }\n    \n\n    @AuraEnabled\n    public static Boolean hasTwitterID(String recordID, String objectApiName, String twitterIDFieldApiName) {\n\n        Boolean hasTwitterMemberID = false;\n\n        // CRUD / FLS Check - Create a map with the object names and fields for CRUD\\FLS check\n        mapObjectsFields = new Map<String, Set<String>>(); \n\n        if (!String.isBlank(recordID))\n        {\n            String soql = 'Select id';\n            Sparkle_Helper.AddFieldToObjectsMap('Id', objectApiName, mapObjectsFields);\n\n            if (twitterIDFieldApiName != null)\n            {\n                soql += ', ' + String.escapeSingleQuotes(twitterIDFieldApiName);\n                Sparkle_Helper.AddFieldToObjectsMap(twitterIDFieldApiName, objectApiName, mapObjectsFields);\n            }\n            \n            // Add object name to query string:        \n            soql += ' FROM ' + String.escapeSingleQuotes(objectApiName);\n            \n            soql += ' WHERE id =\\'' + String.escapeSingleQuotes(recordID) + '\\'';\n            \n            // Add limit to query string:        \n            soql += ' limit 1';\n            \n            System.debug('######## soql: ' + soql);\n            \n            // CRUD\\FLS Check: Before running the SOQL query check if the user who is invoking this method has access to the Object and to the fields requested\n        \n            if (Sparkle_Helper.UserHasAccessToObjectsAndFields(mapObjectsFields))\n            {\n                List<SObject> lstQueriedRecords = Database.query(soql);\n                if (lstQueriedRecords.size() > 0)\n                    hasTwitterMemberID = true;\n            }\n        }\n\n        return hasTwitterMemberID;\n\n    }\n\n\n    @AuraEnabled\n    public static Twitter_Lightning_Controller getRecordDetails(String recordID, String objectApiName, String twitterIDFieldApiName, String firstName, String lastName, String companyName, String email) {\n\n        Boolean hasTwitterMemberID = false;\n        Twitter_Lightning_Controller returnRec = new Twitter_Lightning_Controller();\n\n        // CRUD / FLS Check - Create a map with the object names and fields for CRUD\\FLS check\n        mapObjectsFields = new Map<String, Set<String>>(); \n\n        if (!String.isBlank(recordID))\n        {\n            String soql = 'Select id';\n            Sparkle_Helper.AddFieldToObjectsMap('Id', objectApiName, mapObjectsFields);\n                \n            if (twitterIDFieldApiName != null){\n                soql += ', ' + String.escapeSingleQuotes(twitterIDFieldApiName);\n                Sparkle_Helper.AddFieldToObjectsMap(twitterIDFieldApiName, objectApiName, mapObjectsFields);\n            }\n       \n            if (firstName != null){\n                soql += ', ' + String.escapeSingleQuotes(firstName);\n                Sparkle_Helper.AddFieldToObjectsMap(firstName, objectApiName, mapObjectsFields);\n            }\n            \n            if (lastName != null){\n                soql += ', ' + String.escapeSingleQuotes(lastName);\n                Sparkle_Helper.AddFieldToObjectsMap(lastName, objectApiName, mapObjectsFields);\n            }\n            \n            if (companyName != null){\n                soql += ', ' + String.escapeSingleQuotes(companyName);\n                Sparkle_Helper.AddFieldToObjectsMap(companyName, objectApiName, mapObjectsFields);\n            }\n            \n            if (email != null){\n                soql += ', ' + String.escapeSingleQuotes(email);\n                Sparkle_Helper.AddFieldToObjectsMap(email, objectApiName, mapObjectsFields);\n            }\n            \n            // Add object name to query string:        \n            soql += ' FROM ' + String.escapeSingleQuotes(objectApiName);\n            \n            soql += ' WHERE id =\\'' + String.escapeSingleQuotes(recordID)  + '\\'';\n            \n            // Add limit to query string:        \n            soql += ' limit 1';\n            \n            System.debug('######## soql: ' + soql);\n\n            // CRUD\\FLS Check: Before running the SOQL query check if the user who is invoking this method has access to the Object and to the fields requested\n        \n        if (Sparkle_Helper.UserHasAccessToObjectsAndFields(mapObjectsFields))\n        {\n            \n            List<SObject> lstQueriedRecords = Database.query(soql);\n            if (lstQueriedRecords.size() > 0)\n            {\n                returnRec.hasTwitterMemberID = true;\n                SObject e = lstQueriedRecords[0];\n\n                if (recordID != null)\n                {                \n                    returnRec.salesforceRecordID = Sparkle_Helper.GetSobjectField(e, 'id');\n                }\n                if (firstName != null)\n                {                \n                    returnRec.firstName = Sparkle_Helper.GetSobjectField(e, firstName);\n                }\n                if (lastName != null)\n                {\n                    returnRec.lastName = Sparkle_Helper.GetSobjectField(e, lastName);\n                }\n                if (companyName != null)\n                {\n                    returnRec.companyName = Sparkle_Helper.GetSobjectField(e, companyName);\n                }\n                    \n                if (email != null)\n                {\n                    returnRec.email = Sparkle_Helper.GetSobjectField(e, email);\n                }\n\n                if (twitterIDFieldApiName != null)\n                {\n                    returnRec.twitterName = Sparkle_Helper.GetSobjectField(e, twitterIDFieldApiName);\n                }\n                \n            }\n        }\n            \n              \n        }\n\n\n\n\n        return returnRec;\n\n    }\n\n    \n    @AuraEnabled\n    public static Twitter_Lightning_Controller getTwitterPicture(String recordID, String objectApiName, String twitterIDFieldApiName) {\n        \n        String oauthVersion = '1.0';\n        \n// Get the Twitter App Access token from the Twitter Users Custom Setting: \n\n        Twitter_User__c myCS1 = Twitter_User__c.getValues('TwitterApp');\n        String oauthConsumerKey = myCS1.Token__c;        \n        String oauthConsumerSecret = myCS1.Token_Secret__c;\n        \n        String baseUrl = 'https://api.twitter.com';\n        String oauthSignatureMethod = 'HMAC-SHA1';\n        String strTwitterId = '';\n        String pictureURL = '';\n        String twitterAcct = '';\n        Twitter_Lightning_Controller returnRec = new Twitter_Lightning_Controller();\n        returnRec.pictureUrl = 'https://www.lightningdesignsystem.com/assets/images/avatar1.jpg';\n        if (!String.isBlank(recordID))\n        {\n            \n        \n        \n            System.debug('######## Twitter_Lightning_Controller -  objectApiName: ' + objectApiName);\n            \n            \n            // Get the id of the Salesforce user who is making the request in the LC:\n            String strUserId = UserInfo.getUserId();\n            \n        \n            // CRUD / FLS Check - Create a map with the object names and fields for CRUD\\FLS check\n            mapObjectsFields = new Map<String, Set<String>>(); \n\n            \n            // Get the value from the object record field (LC Attributes) that stored the Twitter Id\n\n            \n            String soql = 'Select id';\n            Sparkle_Helper.AddFieldToObjectsMap('Id', objectApiName, mapObjectsFields);\n            \n            if (twitterIDFieldApiName != null){\n                soql += ', ' + String.escapeSingleQuotes(twitterIDFieldApiName);\n                Sparkle_Helper.AddFieldToObjectsMap(twitterIDFieldApiName, objectApiName, mapObjectsFields);\n            }\n            \n            // Add object name to query string:        \n            soql += ' FROM ' + String.escapeSingleQuotes(objectApiName);\n            \n            soql += ' WHERE id =\\'' + String.escapeSingleQuotes(recordID)  + '\\'';\n            \n            // Add limit to query string:        \n            soql += ' limit 1';\n            \n            System.debug('######## soql: ' + soql);\n\n            // CRUD\\FLS Check: Before running the SOQL query check if the user who is invoking this method has access to the Object and to the fields requested\n        \n            if (Sparkle_Helper.UserHasAccessToObjectsAndFields(mapObjectsFields))\n            {\n            \n                List<SObject> lstQueriedRecords = Database.query(soql); \n                \n                System.debug('######## lstQueriedRecords: ' + lstQueriedRecords);\n                \n                for (SObject e: lstQueriedRecords)\n                {\n                    System.debug('######## e: ' + e);\n                    \n                    strTwitterId = Sparkle_Helper.GetSobjectField(e, twitterIDFieldApiName);\n                }\n                \n                System.debug('######## strTwitterId: ' + strTwitterId);\n                twitterAcct = strTwitterId.remove('@');\n            }\n            \n            // Make a callout to Twitter\n            \n            String keyencoded = EncodingUtil.urlEncode(oauthConsumerKey, 'UTF-8');\n            String secretkeyencoded = EncodingUtil.urlEncode(oauthConsumerSecret, 'UTF-8');\n            \n            //Create Final Key String\n            String sFinal = keyencoded + ':' + secretkeyencoded;\n            //Convert to Blob\n            Blob headerValue = Blob.valueOf(sFinal);\n            \n            //Build Request\n            HttpRequest req = new HttpRequest();\n            req.setEndpoint('https://api.twitter.com/oauth2/token');\n            req.setMethod('POST');\n            \n            //Add Auth Header\n            String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);\n            req.setHeader('Authorization', authorizationHeader);\n            \n            //You need to add this to the request - proved easy to miss in instructions...\n            req.setBody('grant_type=client_credentials');\n            \n            //Make request\n            Http http = new Http();\n            HTTPResponse res = http.send(req);\n            String responseBody = res.getBody();\n            System.debug('########## responseBody : ' + responseBody);\n            String stoken;\n            //Parse JSON for Bearer Token\n            JSONParser parser = JSON.createParser(res.getBody());\n            while (parser.nextToken() != null) \n            {\n                if (parser.getCurrentToken() == JSONToken.FIELD_NAME && parser.getText() == 'access_token')\n                {\n                    parser.nextToken();\n                    stoken = parser.getText();\n                    System.debug('########## bearer token : ' + stoken);\n                }\n            }\n            \n            \n            // Make another request to twitter to get the user details:\n            \n            HttpRequest req2 = new HttpRequest();\n            //I actually store the endpoint in the same custom setting and build dynamically, but for purposes of demo:\n            req2.setEndpoint('https://api.twitter.com/1.1/users/show.json?screen_name=' + twitterAcct);\n            req2.setMethod('GET');\n        \n            //Call Bearer token Method\n            //Note - unless invalidated, I believe you can store this and keep using it indefinitely, but again, to demo concept\n            String authorizationHeader2 = 'Bearer ' + stoken;\n            req2.setHeader('Authorization', authorizationHeader2);\n        \n            Http http2 = new Http();\n            HTTPResponse res2 = http2.send(req2);\n            String sBody2 = res2.getBody();\n            String responseBody2 = res2.getBody();\n            System.debug('########## responseBody2 : ' + responseBody2);\n            \n\n            String pictureFullURL = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'profile_image_url');\n            pictureURL = pictureFullURL.remove('_normal');\n\n            returnRec.pictureUrl = pictureURL;\n            returnRec.twitterName = strTwitterId;\n            returnRec.location = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'location');\n            returnRec.numFollowers = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'followers_count');\n            returnRec.follows = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'friends_count');\n            returnRec.description = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'description');\n\n\n        }\n        \n        \n        return returnRec;\n    }\n\n\n    @AuraEnabled\n    public static Twitter_Lightning_Controller getTwitterUser(String twitterName, String firstName, String lastName, string companyName, String email) {\n        \n        String oauthVersion = '1.0';\n\n        // Get the Twitter App Access token from the Twitter Users Custom Setting:\n\n        Twitter_User__c myCS1 = Twitter_User__c.getValues('TwitterApp');\n        String oauthConsumerKey = myCS1.Token__c;        \n        String oauthConsumerSecret = myCS1.Token_Secret__c;\n\n        String baseUrl = 'https://api.twitter.com';\n        String oauthSignatureMethod = 'HMAC-SHA1';\n        String strTwitterId = '';\n        String pictureURL = '';\n        Twitter_Lightning_Controller returnRec = new Twitter_Lightning_Controller();\n        if (!String.isBlank(twitterName))\n        {\n            \n        \n            System.debug('######## twitterName: ' + twitterName);\n            String twitterAcct = twitterName.remove('@');\n    \n            \n            // Make a callout to Twitter\n            \n            String keyencoded = EncodingUtil.urlEncode(oauthConsumerKey, 'UTF-8');\n            String secretkeyencoded = EncodingUtil.urlEncode(oauthConsumerSecret, 'UTF-8');\n            \n            //Create Final Key String\n            String sFinal = keyencoded + ':' + secretkeyencoded;\n            //Convert to Blob\n            Blob headerValue = Blob.valueOf(sFinal);\n            \n            //Build Request\n            HttpRequest req = new HttpRequest();\n            req.setEndpoint('https://api.twitter.com/oauth2/token');\n            req.setMethod('POST');\n            \n            //Add Auth Header\n            String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);\n            req.setHeader('Authorization', authorizationHeader);\n            \n            //You need to add this to the request - proved easy to miss in instructions...\n            req.setBody('grant_type=client_credentials');\n            \n            //Make request\n            Http http = new Http();\n            HTTPResponse res = http.send(req);\n            String responseBody = res.getBody();\n            System.debug('########## responseBody : ' + responseBody);\n            String stoken;\n            //Parse JSON for Bearer Token\n            JSONParser parser = JSON.createParser(res.getBody());\n            while (parser.nextToken() != null) {\n            if (parser.getCurrentToken() == JSONToken.FIELD_NAME && parser.getText() == 'access_token'){\n            parser.nextToken();\n            stoken = parser.getText();\n            System.debug('########## bearer token : ' + stoken);\n            }\n            }\n            \n            \n            // Make another request to twitter to get the user details:\n            \n            HttpRequest req2 = new HttpRequest();\n            //I actually store the endpoint in the same custom setting and build dynamically, but for purposes of demo:\n            req2.setEndpoint('https://api.twitter.com/1.1/users/show.json?screen_name=' + twitterAcct);\n            req2.setMethod('GET');\n        \n            //Call Bearer token Method\n            //Note - unless invalidated, I believe you can store this and keep using it indefinitely, but again, to demo concept\n            String authorizationHeader2 = 'Bearer ' + stoken;\n            req2.setHeader('Authorization', authorizationHeader2);\n        \n            Http http2 = new Http();\n            HTTPResponse res2 = http2.send(req2);\n            String sBody2 = res2.getBody();\n            String responseBody2 = res2.getBody();\n            System.debug('########## responseBody2 : ' + responseBody2);\n            \n\n            String pictureFullURL = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'profile_image_url');\n            pictureURL = pictureFullURL.remove('_normal');\n\n            returnRec.pictureUrl = pictureURL;\n            returnRec.twitterName = twitterName;\n            returnRec.location = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'location');\n            returnRec.numFollowers = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'followers_count');\n            returnRec.follows = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'friends_count');\n            returnRec.description = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'name');\n            \n            String lstTweetDate = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'created_at');\n            String weekDay = lstTweetDate.substringBefore(' ') ;\n            System.debug('########## weekDay : ' + weekDay);\n            lstTweetDate = lstTweetDate.removeStart(weekDay + ' ');\n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String month = lstTweetDate.substringBefore(' ') ;\n            System.debug('########## month : ' + month);\n            lstTweetDate = lstTweetDate.removeStart(month + ' ');  \n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String day = lstTweetDate.substringBefore(' ') ;\n            System.debug('########## day : ' + day);            \n            lstTweetDate = lstTweetDate.removeStart(day + ' ');\n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String hour = lstTweetDate.substringBefore(':') ;\n            System.debug('########## hour : ' + hour);            \n            lstTweetDate = lstTweetDate.removeStart(hour + ':');\n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String minutes = lstTweetDate.substringBefore(':') ;\n            System.debug('########## minutes : ' + minutes);            \n            lstTweetDate = lstTweetDate.removeStart(minutes + ':');\n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String seconds = lstTweetDate.substringBefore(' ') ;\n            System.debug('########## seconds : ' + seconds);            \n            lstTweetDate = lstTweetDate.removeStart(seconds + ' ');\n            System.debug('########## lstTweetDate : ' + lstTweetDate);\n            String miliSeconds = lstTweetDate.substringBefore(' ') ;\n            System.debug('########## miliSeconds : ' + miliSeconds);\n            String year = lstTweetDate.removeStart(miliSeconds + ' ');\n            System.debug('########## lstTweetDate / year : ' + lstTweetDate);\n            System.debug('########## year : ' + year);\n            \n            if (!Test.isRunningTest())\n            {\n            DateTime dt = DateTime.newInstance(Integer.valueOf(year), Sparkle_Helper.getMonthIntergerValue(month), Integer.valueOf(day), Integer.valueOf(hour), Integer.valueOf(minutes), Integer.valueOf(seconds));\n            \n            returnRec.tweetDate = dt.format();\n            }\n            returnRec.tweetText = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'text');\n            returnRec.tweetLink = Sparkle_Helper.getFieldValueFromJson(responseBody2, 'expanded_url');\n\n\n        }\n        else\n        {\n            pictureURL = 'https://www.lightningdesignsystem.com/assets/images/avatar1.jpg';\n        }\n\n        \n        \n        \n        \n        \n        \n        return returnRec;\n    }\n \n\n\n}",
			"file": "src/classes/Twitter_Lightning_Controller.cls",
			"file_size": 20508,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 20508,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "public with sharing class ListServerController {\n    \n    private static Map<String, Set<String>> mapObjectsFields = null;\n    \n    @AuraEnabled\n    public String recordID { get;set; }\n    @AuraEnabled\n    public String eventField { get;set; }\n    @AuraEnabled\n    public String column1 { get;set; }\n    @AuraEnabled\n    public String column2 { get;set; }\n    @AuraEnabled\n    public String column3 { get;set; }\n    @AuraEnabled\n    public String column4 { get;set; }\n    \n\n    \n\n    //Use @AuraEnabled to enable client- and server-side access to the method\n    @AuraEnabled\n    public static List<ListServerController> getListRecords(String rowsLimit, String objectApiName, String filter1Field, String filter1Value, String eventField, String column1, String column2, String column3, String column4, String sortField, String sortDirection) {\n        \n        System.debug('######## rowsLimit: ' + rowsLimit);\n        System.debug('######## objectApiName: ' + objectApiName);\n        \n        // CRUD / FLS Check - Create a map with the object names and fields for CRUD\\FLS check\n        mapObjectsFields = new Map<String, Set<String>>(); \n        \n        Sparkle_Helper.AddFieldToObjectsMap('Id', objectApiName, mapObjectsFields);\n        \n        List<ListServerController> lstReturnRecords = new List<ListServerController>();\n        \n        Integer rLimit = integer.valueOf(rowsLimit);\n        System.debug('######## rLimit: ' + rLimit);\n        \n        \n        \n        String soql = 'Select id';\n        \n        if (eventField != null && !eventField.equalsIgnoreCase('Id'))\n        {\n            soql += ', ' + String.escapeSingleQuotes(eventField);\n            Sparkle_Helper.AddFieldToObjectsMap(eventField, objectApiName, mapObjectsFields);\n        }\n        \n        if (column1 != null)\n        {\n            soql += ', ' + String.escapeSingleQuotes(column1);\n            Sparkle_Helper.AddFieldToObjectsMap(column1, objectApiName, mapObjectsFields);\n        }\n        if (column2 != null)\n        {\n            soql += ', ' + String.escapeSingleQuotes(column2);\n            Sparkle_Helper.AddFieldToObjectsMap(column2, objectApiName, mapObjectsFields);\n        }\n        if (column3 != null)\n        {\n            soql += ', ' + String.escapeSingleQuotes(column3);\n            Sparkle_Helper.AddFieldToObjectsMap(column3, objectApiName, mapObjectsFields);\n        }\n        if (column4 != null)\n        {\n            soql += ', ' + String.escapeSingleQuotes(column4);\n            Sparkle_Helper.AddFieldToObjectsMap(column4, objectApiName, mapObjectsFields);\n        }\n        // Add object name to query string:        \n        soql += ' FROM ' + String.escapeSingleQuotes(objectApiName);\n        \n        // Add Filter Where clause if provided\n        if (filter1Field != null && filter1Value != null)\n        {\n            soql += ' where ' + String.escapeSingleQuotes(filter1Field)  + ' = \\'' + String.escapeSingleQuotes(filter1Value) +'\\'';\n            Sparkle_Helper.AddFieldToObjectsMap(filter1Field, objectApiName, mapObjectsFields);\n        }\n        // Add Order By clause if provided\n        if (sortField != null && sortDirection != null)\n        {\n            soql += ' order by ' + String.escapeSingleQuotes(sortField)  + ' ' + String.escapeSingleQuotes(sortDirection);\n            Sparkle_Helper.AddFieldToObjectsMap(sortField, objectApiName, mapObjectsFields);\n        }\n        // Add return row limit to query string:        \n        soql += ' limit ' + String.escapeSingleQuotes(rowsLimit);\n        \n        // Get List of QueriedRecords\n        \n        System.debug('######## soql: ' + soql);\n        \n        \n        \n        \n        // CRUD\\FLS Check: Before running the SOQL query check if the user who is invoking this method has access to the Object and to the fields requested\n        \n        if (Sparkle_Helper.UserHasAccessToObjectsAndFields(mapObjectsFields))\n        {\n\n            List<SObject> lstQueriedRecords = Database.query(soql); \n            \n            System.debug('######## lstQueriedRecords: ' + lstQueriedRecords);\n           \n            \n            \n            for (SObject e: lstQueriedRecords)\n            {\n                System.debug('######## e: ' + e);\n                ListServerController i = new ListServerController();\n                \n                \n                i.recordID = String.valueOf( e.get('id') );\n                if (eventField != null)\n                {                \n                    i.eventField = Sparkle_Helper.GetSobjectField(e, eventField);\n                }\n                if (column1 != null)\n                {\n                    i.column1 = Sparkle_Helper.GetSobjectField(e, column1);\n                }\n                if (column2 != null)\n                {\n                    i.column2 = Sparkle_Helper.GetSobjectField(e, column2);\n                }\n                \t\n                if (column3 != null)\n                {\n                    i.column3 = Sparkle_Helper.GetSobjectField(e, column3); \n                }\n                \t\n                if (column4 != null)\n                {\n                    i.column4 = Sparkle_Helper.GetSobjectField(e, column4);\n                }\n                \n\n                lstReturnRecords.add(i);\n\n    \t\t\tSystem.debug('######## i: ' + i);               \n            }\n            \n        }\n        \n        System.debug('######## lstReturnRecords: ' + lstReturnRecords);\n        \n        return lstReturnRecords;\n        //\n        \n    }\n\n    @AuraEnabled\n    public static User getCurrentUser() {\n      User user = [SELECT Id, FirstName, LastName FROM User WHERE Id = :UserInfo.getUserId() LIMIT 1];\n      return user;\n  }\n    \n\n\n    \n}",
			"file": "src/classes/ListServerController.cls",
			"file_size": 5700,
			"file_write_time": 131335640700000000,
			"settings":
			{
				"buffer_size": 5700,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "git",
		"selected_items":
		[
			[
				"git",
				"Git: Push"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Install Package",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"Install Package",
			"Package Control: Install Package",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura"
	],
	"file_history":
	[
		"/Users/rreboucas/Downloads/Realty/index.html",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsList.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/pages/InterviewQuestionsLDS.page",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsListHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/OfferLetterSPA/OfferLetterSPA.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/DynamicSearch/DynamicSearchController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferralsController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferrals.design",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferrals.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Generic_List_Modal/Generic_List_Modal.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Generic_List_Modal/Generic_List_ModalController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Modal_Record_Detail_Controller.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Twitter_Lightning_Controller.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/ReferralsServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/displayrecdetails/displayrecdetails.evt",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferrals.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferralsHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/DynamicSearch/DynamicSearchHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/RelatedListServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Generic_List_Modal/Generic_List_Modal.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateReferrals/CandidateReferrals.svg",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Generic_List_Modal/Generic_List_ModalHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/DynamicSearchController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsList.svg",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_Explorer.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_ExplorerController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_ExplorerHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_Explorer.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_Explorer.design",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Explorer/Twitter_Explorer.svg",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserDetails/TwitterUserDetails.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserDetails/TwitterUserDetailsController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserDetails/TwitterUserDetailsHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserDetails/TwitterUserDetails.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/ListServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Sparkle_Helper.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsList.design",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsListController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/DynamicSearch/DynamicSearch.design",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/InterviewsList/InterviewsList.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/ContactController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/LightningSearch/LightningSearchRenderer.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/LightningSearch/LightningSearch.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/LightningSearch/LightningSearchController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/LightningSearch/LightningSearchHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/LightningSearch/LightningSearch.cmp",
		"/Users/rreboucas/Downloads/unpackaged 4/applications/Recruitment.app",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/FilesViewerServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/applications/Recruitment.app",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/flexipages/Candidate_Record_Page.flexipage",
		"/Users/rreboucas/Desktop/package.xml",
		"/Users/rreboucas/Desktop/Recruitment.app",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/svg/svg.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/recordListEvent/recordListEvent.evt",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserSearch/TwitterUserSearch.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterUserSearch/TwitterUserSearchController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/FilesViewer/FilesViewer.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/FilesViewer/FilesViewerController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CanvasApp/CanvasApp.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/RecordTimeline/RecordTimeline.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/TestFactory.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Test_Lightning_Apex_Controllers.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Sparkle_After_Install.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Picture_Viewer/Twitter_Picture_Viewer.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/JqueryTestLocker/JqueryTestLocker.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/JqueryTestLocker_App/JqueryTestLocker_App.app",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/WebServiceMockImpl.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/myControllerExtension.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/MyCustomController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/GenericListMap_ServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/GenericListMap/GenericListMap.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/GenericListMap/GenericListMapController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/GenericListMap/GenericListMapHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/RelatedListServerController.cls-meta.xml",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/CandidateGeneralController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/GenericListMap/GenericListMapRenderer.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/RecordTimelineServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/linkedinauth.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/pages/testOmni.page",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/Linkedin_Lightning_Controller.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/PositionControllerExtension.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/defaultTokens/defaultTokens.tokens",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/defaultToken/defaultToken.tokens",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/FilesViewer/FilesViewer.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/GenericListMap/GenericListMap.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Picture_Viewer/Twitter_Picture_Viewer.css",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/ProjectSparkleLCsInfo/ProjectSparkleLCsInfo.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/ProjectSparkleLCsInfo/ProjectSparkleLCsInfoController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/RecordMarker/RecordMarkerController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/MapServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/RecordMarker/RecordMarker.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateMapContainer/CandidateMapContainer.cmp",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Picture_Viewer/Twitter_Picture_ViewerController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/RecordTimeline/RecordTimelineController.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/classes/InterviewsLCServerController.cls",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Picture_Viewer/Twitter_Picture_ViewerHelper.js",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/TwitterRecordEvent/TwitterRecordEvent.evt",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/Twitter_Picture_Viewer/Twitter_Picture_Viewer.design",
		"/users/rreboucas/documents/MavensMateProjects/DevconLightning/src/aura/CandidateMapContainer/CandidateMapContainer.css",
		"/Users/rreboucas/Documents/Lightning/Locker/servercontrollerinterview",
		"/Users/rreboucas/Documents/Lightning/Locker/LCComponentApexServerController.txt",
		"/Users/rreboucas/Documents/Lightning/Locker/LCComponentClientController.txt",
		"/Users/rreboucas/Documents/Lightning/Locker/LCComponentMarkup.txt",
		"/Users/rreboucas/Downloads/ifollowbootstrap.css",
		"/Users/rreboucas/Documents/LightningComponent/newattempt",
		"/Users/rreboucas/Downloads/M2_LabFiles/expenseList.cmp.txt",
		"/Users/rreboucas/Documents/MavensMateProjects/TrainingFeb15/src/classes/accsearchcontroller.cls",
		"/Users/rreboucas/Documents/MavensMateProjects/TrainingFeb15/src/pages/OfficeSpace_Search_Results.page",
		"/Users/rreboucas/Documents/MavensMateProjects/TrainingFeb15/src/classes/test_accsearchcontroller.cls",
		"/Users/rreboucas/Library/Application Support/Sublime Text 3/Packages/User/mavensmate.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 99.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"acct",
			"select",
			"Account",
			"cmp",
			"show",
			"testautonumdata",
			"testautonumdata__",
			"referr",
			"testautonumdata__",
			");\n",
			"getsobjectFiel",
			"getTwitterUser",
			"component",
			"accessToken",
			"oauthTokenSecret",
			"url",
			"testautonumdata__",
			"spinner",
			"showSpinner",
			"col-sm-2",
			"col-sm-10",
			"panel-heading",
			"pannel-heading",
			".col-sm-4",
			"open",
			"ConnectApi.FeedItem[buildVersion=29.0",
			"Weekly TE Team call recording.",
			"thecontroller"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"rec",
			"Candidate",
			"",
			"accsearchcontroller"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/aura/DynamicSearch/DynamicSearch.cmp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1805,
						"regions":
						{
						},
						"selection":
						[
							[
								53,
								167
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/aura/DynamicSearch/DynamicSearchController.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1276,
						"regions":
						{
						},
						"selection":
						[
							[
								540,
								540
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/aura/InterviewsList/InterviewsListHelper.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4742,
						"regions":
						{
						},
						"selection":
						[
							[
								1248,
								1273
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 167.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/aura/InterviewsList/InterviewsListController.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12378,
						"regions":
						{
						},
						"selection":
						[
							[
								4203,
								4222
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/aura/InterviewsList/InterviewsList.cmp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10756,
						"regions":
						{
						},
						"selection":
						[
							[
								3062,
								2997
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/aura/TwitterUserDetails/TwitterUserDetails.cmp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4400,
						"regions":
						{
						},
						"selection":
						[
							[
								3227,
								3227
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 456.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/aura/Twitter_Explorer/Twitter_Explorer.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/aura/Twitter_Explorer/Twitter_Explorer.cmp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2940,
						"regions":
						{
						},
						"selection":
						[
							[
								2654,
								2682
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/aura/Twitter_Explorer/Twitter_ExplorerController.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1366,
						"regions":
						{
						},
						"selection":
						[
							[
								1357,
								1357
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/rreboucas/Documents/quickactionsComponentCode.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1669,
						"regions":
						{
						},
						"selection":
						[
							[
								1669,
								1669
							]
						],
						"settings":
						{
							"auto_name": "<aura:component implements=\"flexipage:availableFor",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1834,
						"regions":
						{
						},
						"selection":
						[
							[
								187,
								187
							]
						],
						"settings":
						{
							"auto_name": "global with sharing class CandidateController {",
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/classes/Twitter_Lightning_Controller.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20508,
						"regions":
						{
						},
						"selection":
						[
							[
								6936,
								7118
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/classes/ListServerController.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5700,
						"regions":
						{
						},
						"selection":
						[
							[
								163,
								171
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 11.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 169.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 136.0
	},
	"output.exec":
	{
		"height": 136.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-push":
	{
		"height": 136.0
	},
	"pinned_build_system": "",
	"project": "DevconLightning.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 300.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
